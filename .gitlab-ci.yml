image: node:16

variables:
  CACHE_FALLBACK_KEY: dependencies-fallback

cache: &global_cache
  key:
    prefix: dependencies-${CI_COMMIT_REF_SLUG}
    files:
      - package-lock.json
  paths:
    - node_modules
  policy: pull

stages:
  - setup
  - test
  - release
  - build
  - deploy

setup:
  stage: setup
  cache:
    - <<: *global_cache
      policy: push
      key: dependencies-fallback
    - <<: *global_cache
      policy: pull-push
  rules:
    - if: $CI_COMMIT_BRANCH
  script: npm i --prefer-offline

lint:
  stage: test
  script: npm run lint
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - package.json
        - src/**/*

test:
  stage: test
  script: npm test
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - package.json
        - src/**/*

publish:
  stage: release
  variables:
    NPM_CONFIG_REGISTRY: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/
    NPM_TOKEN: $CI_JOB_TOKEN
    GITLAB_TOKEN: $SYSTEM_ACCESS_TOKEN
  script:
    - npx semantic-release
  only:
    - main
  artifacts:
    reports:
      dotenv: release.env

webpack:
  stage: build
  cache:
    - key:
        prefix: webpack-${CI_COMMIT_REF_SLUG}
        files:
          - config/webpack/webpack.config.common.ts
          - config/webpack/webpack.config.prod.ts
      paths:
        - config/webpack/.cache
    - *global_cache
  before_script:
    - npm i --prefer-offline
  script: npm run build
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    name: dist
    paths:
      - dist/

#docker prepare:
#  stage: build
#  cache: []
#  variables:
#    GITLAB_TOKEN: $SYSTEM_ACCESS_TOKEN
#  before_script:
#    - npm c -L project set "@${CI_PROJECT_NAMESPACE}:registry" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
#    - npm c -L project set -- "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken" $CI_JOB_TOKEN
#  script:
#    - export VERSION=${CI_COMMIT_TAG//v}
#    - export PACKAGE_COORDINATES=@${CI_PROJECT_NAMESPACE}/ui@$VERSION
#    - echo "VERSION=$VERSION" >> version.env
#    - |
#      curl -v -H "PRIVATE-TOKEN: $GITLAB_TOKEN" $(npm v $PACKAGE_COORDINATES dist.tarball) -o ${CI_PROJECT_NAME}.tgz
#  artifacts:
#    name: dist
#    reports:
#      dotenv: version.env
#    paths:
#      - ${CI_PROJECT_NAME}.tgz
#  rules:
#    - if: $CI_COMMIT_TAG

docker image:
  stage: build
  needs:
    - job: webpack
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  cache: []
  script:
    - export VERSION=${CI_COMMIT_TAG//v}
    - echo "VERSION=$VERSION" >> version.env
    - ls -la
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      cat /etc/gitlab-runner/certs/ca.crt >> /kaniko/ssl/certs/ca-certificates.crt &&
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/ui:${VERSION}"
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    reports:
      dotenv: version.env
#
#deploy:
#  stage: deploy
#  needs:
#    - job: docker image
#  image:
#    name: docker.k8s.local/jdwheels/bitnami-kubectl:1.23
#    entrypoint: [""]
#  cache: []
#  script:
#    - export VERSION=${CI_COMMIT_TAG//v}
#    - kubectl config use-context mockexchange/mockexchange-agent:primary
#    - >-
#      helm upgrade --install $CI_PROJECT_NAME helm/mockexchange-ui -n mockexchange -f $HELM_VALUES
#      --set image.repository=$CI_REGISTRY_IMAGE/ui
#      --set image.tag=$VERSION
#      --set image.pullSecret=gitlab-registry
#      --set releaseVersion=$VERSION
#      --set releaseSha=$CI_COMMIT_SHA
#      --atomic
#  rules:
#    - if: $CI_COMMIT_TAG
